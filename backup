import cv2
import dlib
import imutils
from scipy.spatial import distance as dist
from imutils import face_utils
import time
import os
import sys

# === Path to shape predictor model ===
model_path = 'shape_predictor_68_face_landmarks.dat'

# === Validate model existence ===
if not os.path.isfile(model_path):
    print(f"[ERROR] Model file not found at: {model_path}")
    sys.exit(1)

# === EAR Calculation ===
def calculate_EAR(eye):
    A = dist.euclidean(eye[1], eye[5])
    B = dist.euclidean(eye[2], eye[4])
    C = dist.euclidean(eye[0], eye[3])
    return (A + B) / (2.0 * C)

# === Constants ===
blink_thresh = 0.20
blink_duration_thresh = 0.3  # seconds
double_blink_gap = 1         # seconds

# === Eye landmark indexes ===
(L_start, L_end) = face_utils.FACIAL_LANDMARKS_IDXS["left_eye"]
(R_start, R_end) = face_utils.FACIAL_LANDMARKS_IDXS["right_eye"]

# === Load models ===
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor(model_path)

# === Start webcam ===
cam = cv2.VideoCapture(0)
if not cam.isOpened():
    print("[ERROR] Cannot open webcam.")
    sys.exit(1)

closed_start_time = None
pending_single = False
pending_time = 0

while True:
    ret, frame = cam.read()
    if not ret:
        print("[ERROR] Failed to read frame from webcam.")
        break

    frame = imutils.resize(frame, width=640)
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    faces = detector(gray)
    current_time = time.time()

    for face in faces:
        shape = predictor(gray, face)
        shape = face_utils.shape_to_np(shape)

        lefteye = shape[L_start:L_end]
        righteye = shape[R_start:R_end]

        left_EAR = calculate_EAR(lefteye)
        right_EAR = calculate_EAR(righteye)
        avg_EAR = (left_EAR + right_EAR) / 2.0

        # === Blink Detection ===
        if avg_EAR < blink_thresh:
            cv2.putText(frame, "Blinking...", (10, 120),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 100, 255), 2)
            if closed_start_time is None:
                closed_start_time = current_time
        else:
            if closed_start_time is not None:
                blink_duration = current_time - closed_start_time
                if blink_duration >= blink_duration_thresh:
                    if pending_single and (current_time - pending_time <= double_blink_gap):
                        cv2.putText(frame, "Double Long Blink → Previous Page", (10, 90),
                                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 0, 255), 2)
                        pending_single = False
                        pending_time = 0
                    else:
                        pending_single = True
                        pending_time = current_time
                closed_start_time = None

        # If a pending single blink has waited too long, trigger it now
        if pending_single and (current_time - pending_time > double_blink_gap):
            cv2.putText(frame, "Long Blink → Next Page", (10, 90),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
            print("Long Blink")
            pending_single = False

        # === EAR Debug Info ===
        cv2.putText(frame, f"L_EAR: {left_EAR:.2f}", (10, 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 255), 2)
        cv2.putText(frame, f"R_EAR: {right_EAR:.2f}", (10, 60),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 255), 2)

    cv2.imshow("Blink Navigation", frame)
    if cv2.waitKey(5) & 0xFF == ord('q'):
        break

cam.release()
cv2.destroyAllWindows()